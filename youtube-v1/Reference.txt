
Timing: 9.30 AM to 6.30 PM 
---

Hands-on 
---
  Explain => Coding => Demo => Try it out => (Todos) => (Review) 

  Let's make it work => Let's make it better 

Topics
---
  3 Weeks 
  ---
    HTML, CSS,  (Project #1)
    JS, ES2015  (Project #2)
    TypeScript  


  4-Weeks
  ---
    React JS (Project #3)
    Redux (Project #4)

---


Softwares Required
---
  * Node JS v 14+ (even version) . 
  * Visual Studio Code Editor
  * Browser ( Chrome / Edge / Firefox / Safari / Opera / Brave )
  * Postman

---

Web Development
---
  1. Front End Development
      HTML, CSS, JS and Many JS libraries and Frameworks

        Client Tool
        --
          Browser 
          Postman / Advanced REST Client
          

  2. Back End Development 
      Java/.Net/Perl/Python/Ruby/PHP/NodeJS + Databases (MySQL/Oracle/PostgreSQL/MongoDB/MariaDB)

        Toolsets
        ---
          Java (file1.java) => (JAVAC) => bytecode (intermediate code) => ( JRE ) => Machine Language 

          Servers: 
            1. Web Servers
                Tomcat
                  Response: HTML, CSS, JS (Traditional Back End / SSR Apps)
                  Response: XML (SOAP Api)
                  Response: JSON (Modern Back End / RESTful API)

            2. Application Servers 
                JBoss (Java)
                Weblogic (Java)
                IBM Websphere (Java)
                Apache (PHP)
                IIS (DotNet)


Browser
---
  will have 
  1. HTML Renderer (html)
  2. CSS Parser (css)
  3. JS Engine (js)

  a.k.a Browser Core 

Browser Family
---
  Netscape Navigator (gone)
  Microsoft Internet Explorer (gone)
  Opera (closed source - gone)

  Apple Safari (Webkit Core Opensourced)
  Mozilla Firefox (Mozilla Core Opensourced)
  Google Chrome ( Opensourced Chromium Core = Webkit + Mozilla + JS Engine )
  Opera Browser ( developed out of Chromium Core )
  Edge Browser ( developed out of Chromium Core )
  Brave Browser ( developed out of Chromium Core )

---


Website 
-------
  HTML
  --- 
    * Structural Layer

    Layouts 
    --
      1. Fixed Layouts 
      2. Fluid Layouts

    HTML Elements 
    --
      1. Block Elements 
      2. Inline Elements

  CSS 
  --
    * Presentation Layer 

    CSS, CSS3, Responsive CSS, SASS and LESS 

  
  JS 
  --
    * Interaction Layer 


Naming Conventions
---

  Casing Types 
  ==========
    1. PascalCase 
        * recommended for Object Oriented Program's (Java, JS & TS) classes 
        * also recommended for Interface in Java & TypeScript 

        examples:
          class CarDetails{

          }

          interface Employee{

          }

    2. camelCase
        * recommended for variables, const, functions, methods in JS & TS 
        * recommended for id's of html elements 

        examples: 
          var myCar = 'BMW'; 
          function getCarInfo() {
            // .... 
          }

    3. kebab-case 
        * recommended for css classes 
        * recommended for urls 
        * recommended for file names, folder names, assets in front end projects 
        * okay for id's of html elements if your architect accepts

        Examples:
        --
          btn-primary 
          slideshow-container 
          youtube-logo.png 

    4. snake_case 
        * never ever use this.
        * okay for const in JS & TS if architect accepts 

        example:
        ---
          const MAX_STUDENTS_PER_CLASS = 30;
          
  ============================

CLEAN CODE 
---

SEO Basics
--
  * how to make our website search engine friendly? 
  * On-page SEO 
      1. Proper Page Title 
      2. H1 Tag 
      3. Meta Desc and Meta Keywords 
      4. Content with h2-h6 and many paragraphs
      5. Images with alt 
      6. Proper File names and URLs
      7. Valid Links without much of read more, learn more 
      
      and many more
      

  * Off-page SEO 

==========================
CSS - Cascading Style Sheet 
---
  1. Inline Styles 
      * coded on the element directly. 

    Disadv
    --
      1. Styles are not re-usable in other elements
      2. Styles are not re-usable in other pages
      3. Bloating HTML files with CSS styles (Structural + Presentation together is wrong)

  2. Internal Styles 
      * coded inside html file within <style></style>


  3. External Styles 


Syntax of CSS
---
  selector {
    /* Style Definition */
    property: value;
    another-property: another-value;
  }

Selectors 
---
  1. Element Selector 
  2. Id Selector 
  3. Class Selector 
  4. Attribute Selector
  5. Pseudo Selector [TODO]


Normalising Styles 
--

===============================


WCAG
---








  














Webapps 
--

