import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

const initialState = {
  isLoading: false,
  isError: false,
  userList: [],
  user: {},
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addUserAsync = createAsyncThunk(
  "users/addUser",
  async (formData) => {
    const response = await axios.post(
      "https://jsonplaceholder.typicode.com/users",
      formData
    );
    debugger;
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchUsersAsync = createAsyncThunk(
  "users/fetchUsers",
  async () => {
    const response = await axios.get(
      "https://jsonplaceholder.typicode.com/users"
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addUser: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.userList = [...state.userList, state.payload];
    },
    fetchUsers: (state) => {
      state.userList = state.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addUserAsync.pending, (state) => {
        state.status = "loading";
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(addUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = false;
        state.userList = [...state.userList, action.payload];
      })
      .addCase(addUserAsync.rejected, (state, action) => {
        state.status = "idle";
         state.isLoading = false;
         state.isError = true;
      })
      .addCase(fetchUsersAsync.pending, (state) => {
        state.status = "loading";
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = false;
        state.userList = action.payload;
      })
      .addCase(fetchUsersAsync.rejected, (state, action) => {
        state.status = "idle";
        state.isLoading = false;
        state.isError = true;
      });
  },
});

export const { addUser, fetchUsers } = usersSlice.actions;
export default usersSlice.reducer;
