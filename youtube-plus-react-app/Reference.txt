npm i react 
npm i dropzone 

2 Types of NPM Dependencies 
-------
1. Project Dependencies
		* packages are needed for the functionality of the project to work

		npm i react 
		npm i dropzone 
		npm i bootstrap 

2. Development Dependencies
		* packages are needed for the project to be developed 

		npm i typescript --save-dev 
		npm i typescript -D 

		npm i sass -D 

====
Naming Conventions
---
	PascalCase
	--------
			* Folder of Components, Component File names and Component Names 


Components 
---
1. Functional Components [ RECOMMENDED ]
		* coded with functions 
		* were called as Presentational Components, Dumb Components (before 2019) 
		* were called as Stateless Components (before 2019 - till react v 16.8) 

		1.1. Functional Component with Named Function [DONE]
		1.2. Functional Component with Anonymous Function [DONE]
		1.3. Functional Component with Arrow Function [DONE] [RECOMMENDED]

2. Class Components 
		* coded as classes 
		* a.k.a Containers, Smart Components, Stateful Components 
		* will have life cycle hooks 

Project Structure
---
	src/
		components/
			Header/
				Header.js 
			Footer/
				Footer.js 
			MenuList/
				MenuList.js 
		pages/
			HomePage/
				HomePage.js 
				Jumbotron/
					Jumbotron.js 
		...
		...
		...


Limitations of JSX 
--
	1. all tags should be closed 
	2. href should be with valid value 
	3. JSX expressions must have one parent element.
	4. class should become className 
	5. style should have mapping to obj -- not string 

Concepts
--
	Props [DONE]
	States [DONE]
	Events [DONE]
	conditional rendering [DONE]
	Lists and Keys [DONE ]
	Two Way Binding [DONE]
	
	Class Components [DONE]
	LifeCycle Hooks [DONE]

	Styles [DONE]
		1. Inline 
		2. Internal
		3. External 
	SASS [DONE]
	Styled Components [DONE]

	ESLint and Prettier Setup

	Render Props [DONE - Self-Learn]
	HOC [DONE]
	Error Boundaries [DONE]
	StrictMode [DONE]
	Fragments [DONE]
	
	Typechecking With PropTypes [DONE]

	Hooks 
	Forms
	Uncontrolled Components

	REST API Calls 
	Routing [DONE]
	Unit Testing 
	Env Variables [Self-learn]
	Build and Deployment 
	Code splitting
	Lazy Loading 
	
----

The top level directory structure will be as follows:

	assets - global static assets such as images, svgs, company logo, etc.
	components - global shared/reusable components, such as layout (wrappers, navigation), form components, buttons
	services - JavaScript modules
	store - Global Redux store
	utils - Utilities, helpers, constants, and the like
	pages - Can also be called "views", the majority of the app would be contained here

--
src/
  components 
    Header/
    Footer/
    MenuList/
  pages/
    HomePage/
      HomePage.js 
      Jumbtron/
        Jumbotron.js
    AboutPage/
       AboutPage.js 
    ContactPage/
      ContactPage.js 
    DashboardPage/
      DashboardPage.js 
    UsersPage/
      UsersPage.js 
      AddUser/
        AddUser.js 

localhost:3001/   -- HomePage 
localhost:3001/about   -- AboutPage 
localhost:3001/contact   -- ContactPage 
localhost:3001/dashboard   -- DashboardPage 
localhost:3001/users        -- UsersPage 
localhost:3001/users/add    -- AddUser


Cross Component Communication
---
	1. Parent to Child Component Communication [DONE]
			Using Props 

	2. Child to Parent Component Communication [DONE]
			Using Props, Events and a callback fn

	3. Any to Any Component Communication 
			3.1 Using React Hooks (Context API)
			3.2 Using ReduxJS / Flux / MobX 

----

Git 
--
  * Distributed version control 
  examples: github.com, bitbucket.com, gitlab.com 
  git clients
  --
    Command Line tools / CLI:
    --- 
      git-scm 
    
    GUI Based:
    ---
      github for Desktop 
      Source Tree 
      Tower 

------

Data Binding 
--
  1. One Way Binding 
      ---
      JS => JSX 

  2. Two Way Binding 
      JS <=> JSX


       
Single Page App (SPA)
---
  7 Characteristics 
  ---
    1. Pages should not reload/refresh [DONE]
    2. URL should be changed [DONE]
    3. Browser History should be maintained [DONE]
    4. Retain Header and Footer [DONE]
    5. The content in b/w header and footer should be updated [DONE]
    6. Active menu should be set [TODO]
    7. Page Title should be changed [TODO - use helmet package from npmjs ]


Building SPA using React-router-dom 
---
	Step 1:
	---
		npm i react-router-dom

	Step 2: 
	--
		Let's identify the URLs of our project 

		Home 				localhost:3000/     
		About us	 	localhost:3000/about     
		Contact us	localhost:3000/contact-us 

		Let's make the necessary changes in MenuList Comp 
	
	Step 3: 
	----
		Identify the matching components for the URLs

		localhost:3000/    						-- HomePage Component 
		localhost:3000/about    			-- AboutPage Component
		localhost:3000/contact-us    	-- ContactUsPage Component

		If any of the above components not created yet, create now 

		src/
			pagess/
				AboutPage/
					AboutPage.js 
				ContactUsPage/
					ContactUsPage.js 

	Step 4: 
	---
		Configure the URLs in App.js 

		Let's put the whole component under the control of BrowserRouter of react-router-dom 

		and then complete the route configs 
			 <Routes>
				{/* URL configuration */}
				<Route path="/" element={<HomePage />} />
				<Route path="/about" element={<AboutPage />} />
				<Route path="/contact-us" element={<ContactUsPage />} />
			</Routes>

	Step 5: 
	---
		Pages are still reloading/refreshing. Let's fix 

		in MenuList.js replace all <a href=''> with <Link to=''> 

Hooks 
--
	* Hooks are available to Fn component 
	* Hooks provide the missed features such as state, lifecycle hooks to fn comp 

	Rules 
	--
		1. Only Call Hooks at the Top Level
				Donâ€™t call Hooks inside loops, conditions, or nested functions. 
		2. Only Call Hooks from React Functional Components 
		3. Call Hooks from custom Hooks which are functions 


		


Any to Any Comp Commn 
--
  Step 1: Create context using createContext() with any data or even null inside 

  Step 2: Identify list of components you want to share the data with
  
  Step 3: Provide the data to the identified components

  Step 4: Receive the data in identified components using useContext() hook
          
=====

Traditional Software Dev Approach 
-----
  Analysis 
    Design (Mockup, Prototypes, UI)
      Development ( Front End Arch, Back End Arch, DB Design )
        Testing 
          Deployment 
            Maintanance 


===
Dev => QA => (50 bugs) => Dev => QA => (20 bugs) => Dev => QA => (5 bugs) => Dev => QA => (0 bug) => [QA Passed] => Deployment
===


Calc 
===== 
  Sources / References:
  ====================
    FRD 
    HLD
    LLD
    Designs / Mockups / Prototypes 
    Style Guides 

  Development
  ============
    Test Cases 
    ----------
      Add Feature
      ----
        1. inputs should be of number 
        2. output should always be of number 
        3. if invalid inputs entered add button should be disabled 
        4. Add button should have + icon 

    function add(a, b){
      if(typeof a === 'number' && typeof b ==='number'){
        return a + b;
      }
    } 
    add(10, 20); // 30
    
---  
Test Automation
---

Modern Software Development Approaches 
--
  1. Test-Driven Developement (TDD)
        * Write NEW CODE only if automated test fails 
        
        Dev writes test cases => (failure) => Dev writes Functionality => (Success)=>  [CODE COMPLETE]

        Test Pattern: AAA (Arrange, Act, Assert)
        Tools: JEST JS

  2. Behaviour-Driven Developement (BDD)
       * an agile s/w dev methodology 
       * app is documented, designed around the behaviour the end user wants to experience 
          when interacting with the app 

        Dev writes test cases around the behaviour of the app => (failure )=> Dev writes Functionality => (Success) => [Code Complete]

        Test Pattern: Given/When/Then 
        Tools: Jasmine JS 


Automation Testing 
----
  Levels 
  0. Static Type Checking 
      (Tools: TypeScript / FlowJS / PropTypes)
  1. Unit Testing (will learn)
      * Testing tiny, independent unit of our component 
      * Testing the component in isolation (without connecting to REST API)
      * Bug Reduction Density: 40-80% 

      Tools: 
      ----- 
        JEST JS (Unit Testing Framework + Test Runner)
        React Testing Library (RTL)
        EnzymeJS (No official support for React V18)

  2. Integration Testing 
      * Testing the component by integrating multiple components together 
      * Testing the component with service calls (REST API calls)

      Tools: 
      --- 
        JEST JS (Unit Testing Framework + Test Runner)
        React Testing Library (RTL)
        EnzymeJS (No official support for React V18)

  3. End to End (E2E) Testing 
      * Testing the whole app as one entity 

      Tools:
      --
        * Selenium
        * CypressJS 
        * Protractor 


Testing Patterns
======
  1. AAA (Arrange, Act, Assert)
  2. Given/When/Then
  
----

Tools for Testing React App 
=============
  1. Jest JS (Unit Testing Framework + Test Runner)
  2. React Testing Library (RTL) -- Testing Utility for DOM Querying 
  3. EnzymeJS - Testing Utility for DOM Querying (similar to jQuery)
      supports officially till React v16.
      Also work unofficially till React v17.
      No Support for React v18. 

============
  1. How to write test cases/specs?
  2. Where to write the test cases/specs? 
  3. How to test the app by tools?

=====

Unit Testing 
--
	1. Testing JSX Elements [DONE]
	2. Testing Props [DONE]
	3. Testing Inline CSS [DONE]
	4. Testing CSS Class [DONE]
	5. Testing Event & States [DONE]
	6. Testing Event with Buttons [DONE]
			* Counter with fireEvent [DONE]
			* ThemeSwitching with userEvent [DONE]
	7. Snapshot Testing 
	9. Testing Forms 
	10. Testing REST Api Calls 
			* with mocks 
			* spies 
			* negative test 
	11. Testing Routing [TODO]
	12. Testing Context 
	13. Setup/Teardown 
			beforeEach, afterEach 

---



	 
